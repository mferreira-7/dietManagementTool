package main.app.utils;

import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class HTMLGenerator {

    public static void generateHTML(List<DateFood> foods, String username) {
        StringBuilder htmlContent = new StringBuilder();

        initiateHTMLDocument(htmlContent);
        generateHeader(htmlContent, username);

        generateTable(htmlContent, foods);


        htmlContent.append("<div style=\"display:flex; justify-content:center; flex-wrap:wrap;\">\n");


        generateLinearRegressionChartWithGoogleCharts(htmlContent, foods);

        generatePieChartFromListWithGoogleCharts(htmlContent, foods);


        htmlContent.append("</div>\n");

        generateMealTypes(htmlContent, foods);
        generateFooter(htmlContent);
        finalizeHTMLDocument(htmlContent);

        writeToFile(htmlContent.toString(), username);
    }

    private static void initiateHTMLDocument(StringBuilder htmlContent) {
        htmlContent.append("<!DOCTYPE html>\n<html>\n<head>\n")
                .append("<title>Daily Food Intake Summary</title>\n<style>\n")
                .append("table { font-family: Arial, sans-serif; border-collapse: collapse; width: 100%; margin-bottom: 20px; }\n")
                .append("th, td { border: 1px solid #dddddd; text-align: left; padding: 8px; }\n")
                .append("th { background-color: #f2f2f2; }\n")
                .append("footer { margin-top: 20px; padding: 10px; background-color: #f2f2f2; text-align: center; font-family: Arial, sans-serif; }\n")
                .append("h1 { text-align: center; font-family: Arial, sans-serif; }\n")
                .append("</style>\n</head>\n<body>\n");
    }


    private static void generateHeader(StringBuilder htmlContent, String username) {
        htmlContent.append("<h1>" + username + " - Daily Food Intake Summary</h1>\n");
    }

    private static void generateTable(StringBuilder htmlContent, List<DateFood> foods) {
        htmlContent.append("<table>\n<tr>\n<th>Date</th>\n<th>Meal Type</th>\n<th>Name</th>\n<th>Calories</th>\n")
                .append("<th>Serving Size</th>\n<th>Total Fat</th>\n<th>Saturated Fat</th>\n<th>Protein</th>\n")
                .append("<th>Sodium</th>\n<th>Potassium</th>\n<th>Cholesterol Mg</th>\n<th>Total Carbs</th>\n<th>Fiber</th>\n<th>Sugar</th>\n</tr>\n");

        iterateFoods(htmlContent, foods);

        htmlContent.append("</table>\n");

    }

    private static void iterateFoods(StringBuilder htmlContent, List<DateFood> foods) {
        for (DateFood food : foods) {
            htmlContent.append("<tr>\n")
                    .append("<td>").append(food.getDate()).append("</td>\n")
                    .append("<td>").append(food.getMealType()).append("</td>\n")
                    .append("<td>").append(food.getName()).append("</td>\n")
                    .append("<td>").append(food.getCalories()).append("</td>\n")
                    .append("<td>").append(food.getServingSize()).append("</td>\n")
                    .append("<td>").append(food.getTotalFat()).append("</td>\n")
                    .append("<td>").append(food.getSaturatedFat()).append("</td>\n")
                    .append("<td>").append(food.getProtein()).append("</td>\n")
                    .append("<td>").append(food.getSodium()).append("</td>\n")
                    .append("<td>").append(food.getPotassium()).append("</td>\n")
                    .append("<td>").append(food.getCholesterolMg()).append("</td>\n")
                    .append("<td>").append(food.getTotalCarbs()).append("</td>\n")
                    .append("<td>").append(food.getFiber()).append("</td>\n")
                    .append("<td>").append(food.getSugar()).append("</td>\n")
                    .append("</tr>\n");
        }

    }

    private static void generateFooter(StringBuilder htmlContent) {
        htmlContent.append("<footer>\n<p>Report generated by the software provided by <strong>Team 50 | University of Essex</strong>.</p>\n</footer>\n");
    }

    private static void finalizeHTMLDocument(StringBuilder htmlContent) {
        htmlContent.append("</body>\n</html>");
    }

    private static void writeToFile(String htmlContent, String username) {
        try (FileWriter fileWriter = new FileWriter("src\\main\\user_reports\\" + username + ".html")) {
            fileWriter.write(htmlContent);
            System.out.println("HTML file with graph created successfully.");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }


    private static void generateMealTypes(StringBuilder htmlContent, List<DateFood> foods) {
        String[] mealTypes = {"Breakfast", "Lunch", "Dinner", "Other"};
        for (String mealType : mealTypes) {
            generateMealTypeTable(htmlContent, foods, mealType);
        }
    }

    public static void generateMealTypeTable(StringBuilder htmlContent, List<DateFood> foods, String mealType) {

        List<DateFood> filteredFoods = foods.stream()
                .filter(food -> food.getMealType().equalsIgnoreCase(mealType))
                .collect(Collectors.toList());

        if (!filteredFoods.isEmpty()) {


            htmlContent.append("<table style=\"margin-top: 10;\">\n")
                    .append("<tr>\n")
                    .append("<th>Date</th>\n")
                    .append("<th>Meal Type</th>\n")
                    .append("<th>Name</th>\n")
                    .append("<th>Calories</th>\n")
                    .append("<th>Serving Size</th>\n")
                    .append("<th>Total Fat</th>\n")
                    .append("<th>Saturated Fat</th>\n")
                    .append("<th>Protein</th>\n")
                    .append("<th>Sodium</th>\n")
                    .append("<th>Potassium</th>\n")
                    .append("<th>Cholesterol Mg</th>\n")
                    .append("<th>Total Carbs</th>\n")
                    .append("<th>Fiber</th>\n")
                    .append("<th>Sugar</th>\n")
                    .append("</tr>\n");

            iterateFoods(htmlContent, filteredFoods);
            htmlContent.append("</table>\n");
            htmlContent.append("</div>\n");
        }
    }

    private static void generateLinearRegressionChartWithGoogleCharts(StringBuilder htmlContent, List<DateFood> foods) {
        htmlContent.append("<div id=\"linearRegressionChart\" style=\"width: 100%; max-width: 800px; height: auto; aspect-ratio: 16 / 9; margin: 10px;\"></div>\n")
                .append("<script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>\n")
                .append("<script type=\"text/javascript\">\n") // Start of script content
                .append("google.charts.load('current', {'packages':['corechart']});\n")
                .append("google.charts.setOnLoadCallback(drawLinearRegressionChart);\n") // Changed function name to be unique
                .append("function drawLinearRegressionChart() {\n") // Changed function name to be unique
                .append("var data = new google.visualization.DataTable();\n")
                .append("data.addColumn('date', 'Date');\n")
                .append("data.addColumn('number', 'Calories');\n")
                .append("data.addRows([\n");

        foods.forEach(food -> {
            htmlContent.append("[new Date('")
                    .append(food.getDate().toString())
                    .append("'), ")
                    .append(food.getCalories())
                    .append("],\n");
        });

        htmlContent.append("]);\n")
                .append("var options = {\n")
                .append("title: 'Linear Regression - Calories Over Time',\n")
                .append("hAxis: {title: 'Date'},\n")
                .append("vAxis: {title: 'Calories'},\n")
                .append("legend: 'none',\n")
                .append("};\n")
                .append("var chart = new google.visualization.LineChart(document.getElementById('linearRegressionChart'));\n")
                .append("chart.draw(data, options);\n")
                .append("}\n")
                .append("</script>\n"); // End of script content
    }


    private static void generatePieChartFromListWithGoogleCharts(StringBuilder htmlContent, List<DateFood> foods) {

        Map<String, Integer> categoryCounts = new HashMap<>();
        foods.forEach(food -> {
            String category = food.getMealType();
            categoryCounts.put(category, categoryCounts.getOrDefault(category, 0) + 1);
        });


        htmlContent.append("<div id=\"pieChart\" style=\"width: 100%; max-width: 800px; height: auto; aspect-ratio: 16 / 9; margin: 10px;\"></div>\n")
                .append("<script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>\n")
                .append("<script type=\"text/javascript\">\n")
                .append("google.charts.load('current', {'packages':['corechart']});\n")
                .append("google.charts.setOnLoadCallback(drawChart);\n")
                .append("function drawChart() {\n")
                .append("var data = google.visualization.arrayToDataTable([\n")
                .append("['Category', 'Count'],\n");


        categoryCounts.forEach((category, count) -> {
            htmlContent.append("['").append(category).append("', ").append(count).append("],\n");
        });


        htmlContent.append("]);\n")
                .append("var options = {\n")
                .append("title: 'Meal Type Distribution',\n")
                .append("};\n")
                .append("var chart = new google.visualization.PieChart(document.getElementById('pieChart'));\n")
                .append("chart.draw(data, options);\n")
                .append("}\n")
                .append("</script>\n");
    }


    public static void main(String[] args) {
        String userId = "vlad123";
        LocalDate startDate = LocalDate.of(1900, 1, 1);
        LocalDate endDate = LocalDate.now();
        CSVReader.GenerateReport(userId, startDate, endDate);
    }


}
